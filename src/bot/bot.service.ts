import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Context } from 'telegraf';
import { ReputationService } from '../reputation/reputation.service';
import { BOT_MESSAGES, EMOJIS } from '../constants/bot.constants';

@Injectable()
export class BotService {
  private readonly logger = new Logger(BotService.name);
  private bot: Telegraf;

  constructor(
    private reputationService: ReputationService,
    private configService: ConfigService,
  ) {
    const token = this.configService.getOrThrow<string>('bot.token');
    this.bot = new Telegraf(token);
    this.setupHandlers();
  }

  private setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      await ctx.reply(
        `${BOT_MESSAGES.WELCOME}\n\n` +
          `${BOT_MESSAGES.HELP}\n` +
          '‚Ä¢ +rep @username [–ø—Ä–∏—á–∏–Ω–∞] - —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é\n' +
          '‚Ä¢ -rep @username [–ø—Ä–∏—á–∏–Ω–∞] - —É–º–µ–Ω—å—à–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é\n' +
          '‚Ä¢ /rep @username - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
          '‚Ä¢ /top - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏\n' +
          '‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n' +
          '‚Ä¢ /help - –ø–æ–º–æ—â—å\n\n' +
          `${EMOJIS.LIGHT_BULB} –†–µ–ø—É—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`,
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(async (ctx) => {
      await ctx.reply(
        'üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n' +
          '‚ûï –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:\n' +
          '‚Ä¢ +rep @username\n' +
          '‚Ä¢ +rep @username –∑–∞ –ø–æ–º–æ—â—å\n' +
          '‚Ä¢ +rep @username —Å–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≤–µ—Ç\n\n' +
          '‚ûñ –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:\n' +
          '‚Ä¢ -rep @username\n' +
          '‚Ä¢ -rep @username –∑–∞ —Å–ø–∞–º\n' +
          '‚Ä¢ -rep @username –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª\n\n' +
          'üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n' +
          '‚Ä¢ /rep @username - —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
          '‚Ä¢ /top - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
          '‚Ä¢ /stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n' +
          '‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞:\n' +
          '‚Ä¢ –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = –æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏\n' +
          '‚Ä¢ –ï—Å—Ç—å –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏\n' +
          '‚Ä¢ –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é —Å–∞–º–æ–º—É —Å–µ–±–µ',
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ +rep
    this.bot.hears(/^\+rep\s+@?(\w+)(?:\s+(.+))?$/i, async (ctx) => {
      await this.handleReputationChange(ctx, 1);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ -rep
    this.bot.hears(/^-rep\s+@?(\w+)(?:\s+(.+))?$/i, async (ctx) => {
      await this.handleReputationChange(ctx, -1);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /rep
    this.bot.command('rep', async (ctx) => {
      await this.handleReputationView(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /top
    this.bot.command('top', async (ctx) => {
      await this.handleTopUsers(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats
    this.bot.command('stats', async (ctx) => {
      await this.handleStats(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err: Error, ctx) => {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: ${err.message}`, err.stack);
      void ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
  }

  private async handleReputationChange(ctx: Context, value: number) {
    try {
      if (!ctx.message || !('text' in ctx.message)) return;
      const message = ctx.message;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
      if (ctx.chat?.type === 'private') {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö');
        return;
      }

      const match = message.text.match(
        value > 0
          ? /^\+rep\s+@?(\w+)(?:\s+(.+))?$/i
          : /^-rep\s+@?(\w+)(?:\s+(.+))?$/i,
      );

      if (!match) return;

      const reason = match[2]?.trim();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—á–∞—é—Ç
      let targetUserId: number;
      let targetUsername: string | undefined;
      let targetFirstName: string | undefined;
      let targetLastName: string | undefined;

      if (message.reply_to_message?.from) {
        const targetUser = message.reply_to_message.from;
        targetUserId = targetUser.id;
        targetUsername = targetUser.username;
        targetFirstName = targetUser.first_name;
        targetLastName = targetUser.last_name;
      } else {
        // –ï—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API Telegram –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.reply(
          '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é',
        );
        return;
      }

      const giver = ctx.from;
      if (!giver || !ctx.chat) return;

      const result = await this.reputationService.changeReputation(
        giver.id,
        targetUserId,
        ctx.chat.id,
        value,
        reason,
        giver.username,
        giver.first_name,
        giver.last_name,
        targetUsername,
        targetFirstName,
        targetLastName,
      );

      const action = value > 0 ? '‚ûï' : '‚ûñ';
      const actionText = value > 0 ? '—É–≤–µ–ª–∏—á–µ–Ω–∞' : '—É–º–µ–Ω—å—à–µ–Ω–∞';

      let response = `${action} –†–µ–ø—É—Ç–∞—Ü–∏—è ${actionText}!\n\n`;
      response += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.formatUserName(targetFirstName, targetLastName, targetUsername)}\n`;
      response += `‚≠ê –ù–æ–≤–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: ${result.newReputation}\n`;
      if (reason) {
        response += `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
      }

      await ctx.reply(response);
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
      await ctx.reply(
        `‚ùå ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
    }
  }

  private async handleReputationView(ctx: Context) {
    try {
      if (!ctx.message || !('text' in ctx.message)) return;
      const message = ctx.message;

      const args = message.text.split(' ').slice(1);
      if (args.length === 0) {
        await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /rep @username');
        return;
      }

      let targetUserId: number;
      let targetUsername: string | undefined;
      let targetFirstName: string | undefined;
      let targetLastName: string | undefined;

      if (message.reply_to_message?.from) {
        const targetUser = message.reply_to_message.from;
        targetUserId = targetUser.id;
        targetUsername = targetUser.username;
        targetFirstName = targetUser.first_name;
        targetLastName = targetUser.last_name;
      } else {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API Telegram –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const userReputation =
        await this.reputationService.getUserReputation(targetUserId);

      if (!userReputation) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      let response = `üë§ ${this.formatUserName(targetFirstName, targetLastName, targetUsername)}\n\n`;
      response += `‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è: ${userReputation.reputation}\n\n`;

      if (userReputation.receivedReputations.length > 0) {
        response += `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n`;
        userReputation.receivedReputations.forEach((rep) => {
          const giverName = this.formatUserName(
            rep.giver.firstName,
            null,
            rep.giver.username,
          );
          const action = rep.value > 0 ? '‚ûï' : '‚ûñ';
          const reason = rep.reason ? ` (${rep.reason})` : '';
          response += `${action} ${giverName}${reason}\n`;
        });
      }

      await ctx.reply(response);
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
      await ctx.reply(
        `‚ùå ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
    }
  }

  private async handleTopUsers(ctx: Context) {
    try {
      const topUsers = await this.reputationService.getTopUsers(10);

      if (topUsers.length === 0) {
        await ctx.reply('üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π');
        return;
      }

      let response = 'üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:\n\n';

      topUsers.forEach((user, index) => {
        const medal =
          index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üî∏';
        const name = this.formatUserName(
          user.firstName,
          user.lastName,
          user.username,
        );
        response += `${medal} ${index + 1}. ${name} - ${user.reputation} ‚≠ê\n`;
      });

      await ctx.reply(response);
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
      await ctx.reply(
        `‚ùå ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
    }
  }

  private async handleStats(ctx: Context) {
    try {
      const stats = await this.reputationService.getReputationStats();

      let response = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n';
      response += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
      response += `‚≠ê –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: ${stats.totalReputations}\n`;
      response += `‚ûï –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: ${stats.positiveReputations}\n`;
      response += `‚ûñ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: ${stats.negativeReputations}\n`;

      const positivePercent =
        stats.totalReputations > 0
          ? Math.round(
              (stats.positiveReputations / stats.totalReputations) * 100,
            )
          : 0;
      response += `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: ${positivePercent}%`;

      await ctx.reply(response);
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
      await ctx.reply(
        `‚ùå ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
    }
  }

  private formatUserName(
    firstName?: string | null,
    lastName?: string | null,
    username?: string | null,
  ): string {
    let name = '';
    if (firstName) name += firstName;
    if (lastName) name += ` ${lastName}`;
    if (username) name += ` (@${username})`;
    return name.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  }

  async start() {
    try {
      await this.bot.launch();
      this.logger.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
      throw error;
    }
  }

  stop() {
    try {
      this.bot.stop();
      this.logger.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
    }
  }
}
